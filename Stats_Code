# first code in Rstudio with SAM

#object function: x ‹- integer_vector

# combine function: c()
# can be used to create a vector 
# vectors are one of the simplest functions (?) 
# one-dimensional (structured like a list ≠ table) 
# can contain different types of data (numeric, character, logical)
integer_vector c(1, 2, 3, 4, 5)

# there are 3 types of data: numeric, character, logical

# sequence function:seq()
# useful for generating numbers 


# missing script for last class 5/11/21

### Matrices ###

matrix(1:9, nrow = 3) # your first matrix!
matrix(1:9, byrow = TRUE, nrow = 3) # by default byrow = FALSE, therefore the matrix is filled column-wise, by specifying byrow = TRUE the matrix is filled row-wise

# here we create our very first community matrix! A community matrix contains occurrences of species within sites. Typically, species are represented by columns and sites by rows. The value at the intersection between a species and a site tells us if the species was found at the site and in certain cases also the abundance of the species at the site
# in this case we create a matrix where values represent the number of individuals of a given species found in a given site (i.e. abundances). If we would have had only 1s and 0s, we would have called it a presence/absence community matrix (where 1 means we found the species and 0 means we didn't found the species)
garden <- c(10, 2) # in our garden site we found 10 individuals of the first species and two individuals of the second species
forest <- c(8, 3) # here we found 8 individuals of the first species and 3 of the second species
hedgerow <- c(1, 12) # see above
community_matrix <- matrix(c(garden, forest, hedgerow), nrow = 3, byrow = TRUE) # here we build our community matrix by providing a vector made by combining our previous 3 vectors and filling the matrix row-wise -> each row is a site and has two fields (i.e. columns)
species <- c("Parus major", "Erithacus rubecula") # here we create a vector for columns' names (i.e. species' names)
sites <- c("Garden", "Forest", "Hedgerow") # vector for rows' names (i.e. sites' names)
colnames(community_matrix) <- species # we assign names to the columns
rownames(community_matrix) <- sites # the same with rows
community_matrix # our nicely formatted community matrix

# we can also expand our matrix by "binding" other vectors or matrices to our original matrix

passer <- c(15, 2, 5) # we create a vector for another species we sampled but we previously forgot to add to the matrix
community_matrix <- cbind(community_matrix, passer) # here we add (bind) a new column (cbind -> column bind)
park <- c(10, 1, 8) # we also want to add another sampling site where we collected data on the three species we're studying
community_matrix <- rbind(community_matrix, park) # here we add a new row (rbind -> row bind)
community_matrix

colnames(community_matrix)[3] <- "Passer domesticus" # by using vector indexing we only modify the third column name
rownames(community_matrix)[4] <- "Park" # as above with the fourth row name
community_matrix

# to check dimension of a vector: lenght function
# to check dimension of matrix: dimension function dim()
dim(community_matrix)

garden <- c(10, 2)
forest <- c(8, 3)
hedgerow <- c(1, 12)

community_matrix <- matrix(c(garden, forest, hedgerow), nrow = 3, byrow = T)
# byrow default is set to false (F) but in this case it needs toi be set to true (T)

community_matrix
# vector has only one dimension wehareas matrices have more dimensions (two-dimensional?)

species <- c("Parus major", "Erithacus rubecula")
colnames(community_matrix) <- species
community_matrix
sites <- c("Garden", "Forest", "Hedgerow")
rownames(community_matrix) <- sites

passer <-c(15, 2, 5)
cbind(community_matrix, passer)
# The bind function (cbind) can bind data together in the same vector/matrix
community_matrix <- cbind(community_matrix, passer)

colnames(community_matrix)
colnames(community_matrix)[3] <- "Passer domesticus"
community_matrix

park <- c(10, 1, 8)
community matrix <- rbind(community_matrix, park)
rownames(commmunity matrix)[4] <- "Park"
community_matrix

dim(community_matrix)
nrow(community_matrix)
ncol(community_matrix)

colSums(community_matrix)
class(colSums(community_matrix))

rowSums(community_matrix)

community_matrix + 2
community_matrix * 2
cbind(community_matrix[1:4, 1] * 2, community_matrix [, -1])
# Not sure about the line of command right above bc it founds an error

community_matrix[1, 1] <- 10
# first element in brackets refers to column, the second refers to the row

community_matrix[, "Parus major"]
community_matrix[, "Parus major", drop = FALSE]
class(community_matrix["Garden", ]) 
class(community_matrix["Garden", , drop = FALSE]) 
community_matrix["Garden", ]
community_matrix["Garden", , drop = FALSE]
community_matrix[1, ]
community_matrix[1:2, ]
community_matrix[-2, ]
community_matrix[-c(2,4), ]
community_matrix[c(1,3), ]
community_matrix[c(1,3),c(2,3)]
community_matrix[c(1,3),"Parus major"]
# in these different lines of command basicallly we combined viewing inly certain rows and columns of the community-matrix
community_matrix[3:nrow(community_matrix), ]


# Next Topic: Factors
# It's like a character but stricter

plants_vector <- c("Herb", "Shrub", "Tree", "Herb", "Shrub")
plants_factor <- factor(plants_vector)
plants_factor

as.numeric(plants_vector)
# converting charcters to numeric won't work 

as.numeric(plants_factor)
# this conversion instead works but not sure why

temeprature_vector <- c("Low", "High", "Medium", "High", "Low")
# spelled temperature wrong
temperature_vector <- c("Low", "High", "Medium", "High", "Low")
temperature_factor <- factor(temperature_vector,
                             ordered = T,
                             levels = c("Low", "Medium", "High"))
temperature_factor
as.numeric(temperature_factor)
# same exercise as the one just before but with a different vector/factor
# basically use the factor function to convert vector to factor

substrate_vector <- c("L", "S", "L", "L", "S")
substrate_factor <- factor(substrate_vector)
levels(substrate_factor) <- c("Limestone", "Siliceous")
substrate_factor
# The line of command right above the last one is to change the name of the levels from S and L to Siliceousb and Limestone

summary(substrate_factor)

